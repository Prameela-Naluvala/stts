def devopsWebhook = 'https://fundsaxis2.webhook.office.com/webhookb2/60d237ee-f3a2-4f04-adb7-27959c127730@c56018d0-aefb-49ba-adda-e4ddb4438bcf/IncomingWebhook/b44f555c2135422c81d3b9a2d7244d72/639cc0b8-ad5d-4c14-8940-211e40ef15c7'
def buildfailureWebhook = 'https://fundsaxis2.webhook.office.com/webhookb2/60d237ee-f3a2-4f04-adb7-27959c127730@c56018d0-aefb-49ba-adda-e4ddb4438bcf/IncomingWebhook/39637e2c0b3348349cb3fb4be37cc4fa/a8db0d6a-19a5-4f60-8453-d3d41add906f'
def approvalrequestWebhook = 'https://fundsaxis2.webhook.office.com/webhookb2/60d237ee-f3a2-4f04-adb7-27959c127730@c56018d0-aefb-49ba-adda-e4ddb4438bcf/IncomingWebhook/4638f756543e4b6a9da685c955a4b555/a8db0d6a-19a5-4f60-8453-d3d41add906f'

def appName = 'stats'
def REGION = 'eu-west-1'

def buildDockerContainer() {
    sh """
        docker build -f Dockerfile.prod -t statsmoduleprod .
        docker images
        touch confaws
        echo '[default]' > confaws
        echo 'region = eu-west-1' >> confaws
        docker run -d -t --name statscontainer statsmoduleprod:latest
        docker exec statscontainer sh -c 'cd /src/lambda/statsmodule && pip3 install -r requirements.txt'
        docker exec statscontainer sh -c 'touch /root/.aws/config'
        docker cp confaws statscontainer:/root/.aws/config                                   
    """
}

pipeline {
    agent none
    options {
        disableConcurrentBuilds()
        timeout(time: 3, unit: 'HOURS')
        timestamps()
        ansiColor('xterm')
    }
    environment {
        REGION = 'eu-west-1'
    }
    stages {
        stage('Build Docker Container') {
            when {
                anyOf {
                    branch 'development'
                    branch 'release'
                    branch 'main'
                }
                beforeAgent true
            }
            agent {
                label 'docker'
            }
            steps {
                script {
                    buildDockerContainer()
                }
            }
            post {
                failure {
                    script {
                        if ("${env.BRANCH_NAME}" == 'development' || "${env.BRANCH_NAME}" == 'main' || "${env.BRANCH_NAME}" == 'release') {
                            office365ConnectorSend message: "Build Failed! ${env.JOB_NAME}", status: "Failure", color: "d00000", webhookUrl: buildfailureWebhook
                        }
                    }
                }
            }
        }

        stage('Deploy to Development') {
            when {
                branch 'development'
                beforeAgent true
            }
            agent {
                label 'docker'
            }
            environment {
                ROLE_ARN = 'arn:aws:iam::034353630586:role/prod-mgmt-jenkins-assumerole'
                SESSION_NAME = 'JenkinsProdSession'
                REGION = 'eu-west-1'
            }
            stages {
                stage('Assume Role') {
                    steps {
                        withAWS(region: "${env.REGION}", role: "${env.ROLE_ARN}", roleSessionName: "${env.SESSION_NAME}") {
                            script {
                                sh "aws sts get-caller-identity"
                            }
                        }
                    }
                }
                stage('Build Migrations docker image') {
                    steps {
                        withAWS(region: "${env.REGION}", role: "${env.ROLE_ARN}", roleSessionName: "${env.SESSION_NAME}") {
                            script {
                                dir("migrations") {
                                    sh "docker build -t local/migrations ."
                                }
                            }
                        }
                    }
                }
                stage('Liquibase migration') {
                    steps {
                        withAWS(region: "${env.REGION}", role: "${env.ROLE_ARN}", roleSessionName: "${env.SESSION_NAME}") {
                            script {
                                sh """
                                    chmod +x '${(env.WORKSPACE)}/migrations/liquibaseMigration.sh' '${(env.WORKSPACE)}/migrations/entrypoint.sh'
                                """ 
                                sh """
                                    docker run --rm --entrypoint='' \
                                    -w /work/migrations \
                                    -v \$(pwd)/migrations:/work/migrations \
                                    -e AWS_REGION='${region}' \
                                    -e AWS_ENV_PATH='/mgmt/jenkins/dev/${appName}/' \
                                    local/migrations \
                                    ./liquibaseMigration.sh dev
                                """
                            }
                        }
                    }
                    post {
                        always {
                            dir('migrations') {
                                archiveArtifacts artifacts: 'migration-plan.sql', fingerprint: false
                            }
                        }
                        failure {
                            script {
                                if ("${env.BRANCH_NAME}" == 'development') {
                                    office365ConnectorSend message: "Liquibase Migration for development Failed! ${env.JOB_NAME}", status: "Failure", color: "d00000", webhookUrl: buildfailureWebhook
                                }
                            }
                        }
                    }
                }
                stage('Deploy') {
                    steps {
                        script {
                            buildDockerContainer()
                            withAWS(region: "${env.REGION}", role: "${env.ROLE_ARN}", roleSessionName: "${env.SESSION_NAME}") {
                                sh 'docker exec statscontainer sh -c "cd /src/lambda/statsmodule && chalice deploy --stage dev --connection-timeout 300"'
                            }
                        }
                    }
                    post {
                        success {
                            office365ConnectorSend message: "Deployed Stats Dev ${env.JOB_NAME} - ${env.BUILD_NUMBER}", status: "Success", color: "50df16", webhookUrl: devopsWebhook
                        }
                        aborted {
                            office365ConnectorSend message: "Could not deploy Stats Dev ${env.JOB_NAME} - ${env.BUILD_NUMBER}", status: "Aborted", color: "999999", webhookUrl: buildfailureWebhook
                        }
                    }
                }
            }
        }

        stage('Deploy to Stage') {
            when {
                branch 'release'
                beforeAgent true
            }
            agent {
                label 'docker'
            }
            stages {
                stage('Build Migrations docker image') {
                    steps {
                        dir("migrations") {
                            sh "docker build -t local/migrations ."
                        }
                    }
                }
                stage('Liquibase migration') {
                    steps {
                        sh """
                            chmod +x '${(env.WORKSPACE)}/migrations/liquibaseMigration.sh' '${(env.WORKSPACE)}/migrations/entrypoint.sh'
                        """                                                 
                        sh """
                            docker run --rm --entrypoint='' \
                            -w /work/migrations \
                            -v \$(pwd)/migrations:/work/migrations \
                            -e AWS_REGION='${region}' \
                            -e AWS_ENV_PATH='/mgmt/jenkins/stage/${appName}/' \
                            local/migrations \
                            ./liquibaseMigration.sh stage
                        """
                    }
                    post {
                        always {
                            dir('migrations') {
                                archiveArtifacts artifacts: 'migration-plan.sql', fingerprint: false
                            }
                        }
                        failure {
                            script {
                                if ("${env.BRANCH_NAME}" == 'release') {
                                    office365ConnectorSend message: "Liquibase Migration for Stage Failed! ${env.JOB_NAME}", status: "Failure", color: "d00000", webhookUrl: buildfailureWebhook
                                }
                            }
                        }
                    }
                }
                stage('Deploy') {
                    steps {
                        script {
                            buildDockerContainer()
                            sh "docker exec statscontainer sh -c 'cd /src/lambda/statsmodule && chalice deploy --stage stage --connection-timeout 300'"
                        }
                    }
                    post {
                        success {
                            office365ConnectorSend message: "Deployed Stats Stage ${env.JOB_NAME} - ${env.BUILD_NUMBER}", status: "Success", color: "50df16", webhookUrl: devopsWebhook
                        }
                        aborted {
                            office365ConnectorSend message: "Could not deploy Stats Stage ${env.JOB_NAME} - ${env.BUILD_NUMBER}", status: "Aborted", color: "999999", webhookUrl: buildfailureWebhook
                        }
                    }
                }
            }
        }

        stage('Stage Tests') {
            when {
                branch 'release'
                beforeAgent true
            }
            agent {
                label 'docker'
            }
            steps {
                sh "docker exec statscontainer sh -c 'cd /src/lambda/statsmodule && export LAMBDA_STAGE_NAME=stage && py.test tests/'"              
            }
        }

        stage('Deploy to Prod-cons-1') {
            when {
                branch 'main'
                beforeAgent true
            }
            agent {
                label 'docker'
            }
            stages
